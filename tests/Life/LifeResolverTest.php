<?php

namespace Game\Tests\Life;

use Game\Cell\Cell;
use Game\Cell\Coordinates;
use Game\Life\LifeResolver;
use Game\Life\Rule\NewLifeRule;
use Game\Life\Rule\StayAliveRule;
use Game\World\WorldState;
use PHPUnit\Framework\TestCase;

class LifeResolverTest extends TestCase
{
    const LIVING_CELL = 'X';

    /**
     * @dataProvider cellPatternsProvider
     */
    public function testShouldGetCellsWithCorrectLifeStatus()
    {
        $cellGrids = func_get_args();
        $currentCellGrid = $this->createCellsFromGrid(array_shift($cellGrids));

        $lifeResolver = new LifeResolver([new NewLifeRule(), new StayAliveRule()]);

        foreach ($cellGrids as $expectedCellGrid) {
            $worldState = new WorldState($currentCellGrid);
            $currentCellGrid = $lifeResolver->resolveLivingCells($worldState);

            $this->assertEquals($this->createCellsFromGrid($expectedCellGrid), $currentCellGrid);
        }
    }

    /**
     * @return array
     */
    public function cellPatternsProvider(): array
    {
        return [
            'No life' => [
                [
                    [' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' '],
                ],
            ],
            'Still lifes - Block' => [
                [
                    [' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' '],
                    [' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' '],
                    [' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' '],
                ],
            ],
            'Still lifes - Beehive' => [
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
            ],
            'Still lifes - Loaf' => [
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', 'X', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', 'X', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
            ],
            'Still lifes - Boat' => [
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' '],
                    [' ', 'X', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' '],
                    [' ', 'X', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
            ],
            'Still lifes - Tub' => [
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', 'X', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', 'X', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
            ],
            'Oscillators - Blinker' => [
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' '],
                ],
            ],
            'Oscillators - Toad' => [
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', 'X', 'X', ' '],
                    [' ', 'X', 'X', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', 'X', 'X', ' '],
                    [' ', 'X', 'X', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', 'X', ' ', ' ', 'X', ' '],
                    [' ', ' ', 'X', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
            ],
            'Oscillators - Beacon' => [
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' ', ' '],
                    [' ', 'X', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', 'X', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', 'X', ' ', ' ', ' '],
                    [' ', 'X', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', 'X', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
            ],
            'Spaceships - Glider' => [
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                    [' ', 'X', 'X', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', 'X', ' ', 'X', ' ', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                    [' ', 'X', ' ', 'X', ' ', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', 'X', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                    [' ', ' ', ' ', ' ', 'X', ' '],
                    [' ', ' ', 'X', 'X', 'X', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                ],
                [
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', ' ', ' ', ' ', ' '],
                    [' ', ' ', 'X', ' ', 'X', ' '],
                    [' ', ' ', ' ', 'X', 'X', ' '],
                    [' ', ' ', ' ', 'X', ' ', ' '],
                ],
            ],
        ];
    }

    /**
     * @param array $cellGrid
     * @return Cell[]
     */
    private function createCellsFromGrid(array $cellGrid): array
    {
        $cells = [];
        foreach ($cellGrid as $y => $row) {
            foreach ($row as $x => $cell) {
                $cells[] = new Cell(new Coordinates($x, $y), $cell === self::LIVING_CELL);
            }
        }

        return $cells;
    }
}
